pipeline {
  agent any
  
  tools { nodejs 'node20' }
  
  environment {
    GITHUB_CREDENTIALS = 'github-pat'
    GITHUB_USER = 'busra-ertekin'
    BUILD_REPO = "jenkins-builds"
    REPO_NAME = "jenkins-demo-project"
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[
            url: "https://github.com/${env.GITHUB_USER}/${env.REPO_NAME}.git",
            credentialsId: env.GITHUB_CREDENTIALS
          ]]
        ])
      }
    }
    
    stage('Install dependencies') {
      steps {
        sh '''
          echo "Current directory: $(pwd)"
          node -v
          npm ci
        '''
      }
    }
    
    stage('Bump version & tag') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: env.GITHUB_CREDENTIALS,
          usernameVariable: 'GIT_USER',
          passwordVariable: 'GIT_TOKEN'
        )]) {
          sh '''
            echo "Git status before bump:"
            git status
            
            git config user.email "jenkins@busra-ertekin.com"
            git config user.name "jenkins-ci"
            
            git remote set-url origin https://${GIT_TOKEN}@github.com/${GITHUB_USER}/${REPO_NAME}.git
            
            npm version patch -m "ci: bump version to %s [ci skip]"
            
            git push origin HEAD:main --follow-tags
            
            echo "‚úÖ Version bumped and pushed to GitHub"
          '''
        }
      }
    }
    
    stage('Build Application') {
      steps {
        sh '''
          echo "Building Next.js application..."
          npm run build
          echo "‚úÖ Build completed"
        '''
      }
    }
    
    stage('Docker build') {
      steps {
        sh '''
          IMAGE_TAG="${GITHUB_USER}/${REPO_NAME}:$(git rev-parse --short HEAD)"
          echo "Building Docker image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          echo "‚úÖ Docker image built: $IMAGE_TAG"
        '''
      }
    }
    
    stage('Create Full Project Archive') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: env.GITHUB_CREDENTIALS,
          usernameVariable: 'GIT_USER',
          passwordVariable: 'GIT_TOKEN'
        )]) {
          sh '''
            set -e
            
            BUILD_DATE=$(date +"%Y%m%d-%H%M%S")
            COMMIT_SHA=$(git rev-parse --short HEAD)
            VERSION=$(node -p "require('./package.json').version")
            
            ARTIFACT_NAME="jenkins-demo-project-v${VERSION}-${BUILD_DATE}-${COMMIT_SHA}.tar.gz"
            
            echo "================================================"
            echo "Creating full project archive: ${ARTIFACT_NAME}"
            echo "Version: v${VERSION}"
            echo "Date: ${BUILD_DATE}"
            echo "Commit: ${COMMIT_SHA}"
            echo "================================================"
            
            # T√ºm projeyi tar'a ekle (node_modules ve .git hari√ß)
            tar -czf ${ARTIFACT_NAME} \
              --exclude='node_modules' \
              --exclude='.git' \
              --exclude='.next/cache' \
              --exclude='*.tar.gz' \
              .
            
            echo "‚úÖ Archive created: $(ls -lh ${ARTIFACT_NAME} | awk '{print $5}')"
            
            # jenkins-builds reposuna y√ºkle
            TMPDIR=$(mktemp -d)
            echo "Cloning jenkins-builds repository..."
            git clone https://${GIT_TOKEN}@github.com/${GITHUB_USER}/${BUILD_REPO}.git $TMPDIR
            
            cp ${ARTIFACT_NAME} $TMPDIR/
            
            cd $TMPDIR
            
            git config user.email "jenkins@busra-ertekin.com"
            git config user.name "jenkins-ci"
            
            git add ${ARTIFACT_NAME}
            
            COMMIT_MSG="üöÄ Full project build v${VERSION}-${BUILD_DATE}

Project: ${REPO_NAME}
Version: v${VERSION}
Build Date: ${BUILD_DATE}
Commit: ${COMMIT_SHA}
Build Number: ${BUILD_NUMBER}

Contents:
- All source code
- Build output (.next/)
- Configuration files
- Dependencies (package.json, package-lock.json)

Excluded:
- node_modules (reinstall with npm ci)
- .git folder
- Build cache

Generated by Jenkins CI/CD Pipeline"
            
            git commit -m "${COMMIT_MSG}"
            
            echo "Pushing to GitHub..."
            git push origin HEAD:main
            
            cd -
            rm -rf $TMPDIR
            
            echo "================================================"
            echo "‚úÖ SUCCESS! Full project archive pushed to GitHub"
            echo "Repository: https://github.com/${GITHUB_USER}/${BUILD_REPO}"
            echo "File: ${ARTIFACT_NAME}"
            echo "Size: $(ls -lh ${ARTIFACT_NAME} | awk '{print $5}')"
            echo "================================================"
          '''
        }
      }
    }
    
    stage('Build Summary') {
      steps {
        sh '''
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S")
          COMMIT_SHA=$(git rev-parse --short HEAD)
          VERSION=$(node -p "require('./package.json').version")
          
          echo "========================================"
          echo "BUILD SUMMARY"
          echo "========================================"
          echo ""
          echo "üì¶ Project:        ${REPO_NAME}"
          echo "üè∑Ô∏è  Version:        v${VERSION}"
          echo "üìÖ Build Date:     ${BUILD_DATE}"
          echo "üîñ Commit:         ${COMMIT_SHA}"
          echo "üî¢ Build Number:   ${BUILD_NUMBER}"
          echo ""
          echo "üìç Repositories:"
          echo "   Source:  https://github.com/${GITHUB_USER}/${REPO_NAME}"
          echo "   Builds:  https://github.com/${GITHUB_USER}/${BUILD_REPO}"
          echo ""
          echo "‚úÖ Full project archive created and uploaded!"
          echo ""
        '''
      }
    }
  }
  
  post {
    success {
      echo '========================================'
      echo '‚úÖ PIPELINE COMPLETED SUCCESSFULLY!'
      echo '========================================'
    }
    failure {
      echo '========================================'
      echo '‚ùå PIPELINE FAILED!'
      echo '========================================'
    }
    always {
      cleanWs()
    }
  }
}