pipeline {
  agent any
  
  tools { nodejs 'node20' }
  
  triggers {
    pollSCM('H/2 * * * *')
  }
  
  environment {
    GITHUB_CREDENTIALS = 'github-pat'
    GITHUB_USER = 'busra-ertekin'
    BUILD_REPO = "jenkins-builds"
    REPO_NAME = "jenkins-demo-project"
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[
            url: "https://github.com/${env.GITHUB_USER}/${env.REPO_NAME}.git",
            credentialsId: env.GITHUB_CREDENTIALS
          ]]
        ])
      }
    }
    
    stage('Install dependencies') {
      steps {
        sh '''
          echo "Current directory: $(pwd)"
          node -v
          npm ci
        '''
      }
    }
    
    stage('Bump version & tag') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: env.GITHUB_CREDENTIALS,
          usernameVariable: 'GIT_USER',
          passwordVariable: 'GIT_TOKEN'
        )]) {
          sh '''
            echo "Git status before bump:"
            git status
            
            git config user.email "jenkins@busra-ertekin.com"
            git config user.name "jenkins-ci"
            
            git remote set-url origin https://${GIT_TOKEN}@github.com/${GITHUB_USER}/${REPO_NAME}.git
            
            npm version patch -m "ci: bump version to %s [ci skip]"
            
            git push origin HEAD:main --follow-tags
            
            echo "✅ Version bumped and pushed to GitHub"
          '''
        }
      }
    }
    
    stage('Build Application') {
      steps {
        sh '''
          echo "Building Next.js application..."
          npm run build
          echo "✅ Build completed"
        '''
      }
    }
    
    stage('Docker build') {
      steps {
        sh '''
          IMAGE_TAG="${GITHUB_USER}/${REPO_NAME}:$(git rev-parse --short HEAD)"
          echo "Building Docker image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          echo "✅ Docker image built: $IMAGE_TAG"
        '''
      }
    }
    
    stage('Create and Push Artifact') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: env.GITHUB_CREDENTIALS,
          usernameVariable: 'GIT_USER',
          passwordVariable: 'GIT_TOKEN'
        )]) {
          sh '''
            set -e  # Hata durumunda dur
            
            # Tarih ve commit bilgilerini al
            BUILD_DATE=$(date +"%Y%m%d-%H%M%S")
            COMMIT_SHA=$(git rev-parse --short HEAD)
            VERSION=$(node -p "require('./package.json').version")
            
            # Artifact adı: artifact-v0.1.3-20251027-143022-a1b2c3d.tar.gz
            ARTIFACT_NAME="artifact-v${VERSION}-${BUILD_DATE}-${COMMIT_SHA}.tar.gz"
            
            echo "================================================"
            echo "Creating artifact: ${ARTIFACT_NAME}"
            echo "Version: v${VERSION}"
            echo "Date: ${BUILD_DATE}"
            echo "Commit: ${COMMIT_SHA}"
            echo "================================================"
            
            # Tar dosyası oluştur
            tar -czf ${ARTIFACT_NAME} .next package.json package-lock.json
            
            echo "✅ Artifact created: $(ls -lh ${ARTIFACT_NAME})"
            
            # Geçici dizin oluştur
            TMPDIR=$(mktemp -d)
            echo "Temp directory: $TMPDIR"
            
            # jenkins-builds reposunu klonla
            echo "Cloning jenkins-builds repository..."
            git clone https://${GIT_TOKEN}@github.com/${GITHUB_USER}/${BUILD_REPO}.git $TMPDIR
            
            # Artifact'ı kopyala
            cp ${ARTIFACT_NAME} $TMPDIR/
            
            # jenkins-builds'e push
            cd $TMPDIR
            
            git config user.email "jenkins@busra-ertekin.com"
            git config user.name "jenkins-ci"
            
            git add ${ARTIFACT_NAME}
            
            # Detaylı commit mesajı
            COMMIT_MSG="🚀 Add build artifact ${ARTIFACT_NAME}

Project: ${REPO_NAME}
Version: v${VERSION}
Build Date: ${BUILD_DATE}
Commit: ${COMMIT_SHA}
Build Number: ${BUILD_NUMBER}

Generated by Jenkins CI/CD Pipeline"
            
            git commit -m "${COMMIT_MSG}"
            
            echo "Pushing to GitHub..."
            git push origin HEAD:main
            
            # Temizlik
            cd -
            rm -rf $TMPDIR
            
            echo "================================================"
            echo "✅ SUCCESS! Artifact pushed to GitHub"
            echo "Repository: https://github.com/${GITHUB_USER}/${BUILD_REPO}"
            echo "File: ${ARTIFACT_NAME}"
            echo "================================================"
          '''
        }
      }
    }
    
    stage('Create Build Summary') {
      steps {
        sh '''
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S")
          COMMIT_SHA=$(git rev-parse --short HEAD)
          VERSION=$(node -p "require('./package.json').version")
          
          echo "╔════════════════════════════════════════════════╗"
          echo "║           BUILD SUMMARY                        ║"
          echo "╚════════════════════════════════════════════════╝"
          echo ""
          echo "📦 Project:        ${REPO_NAME}"
          echo "🏷️  Version:        v${VERSION}"
          echo "📅 Build Date:     ${BUILD_DATE}"
          echo "🔖 Commit:         ${COMMIT_SHA}"
          echo "🔢 Build Number:   ${BUILD_NUMBER}"
          echo ""
          echo "📍 Repositories:"
          echo "   Source:  https://github.com/${GITHUB_USER}/${REPO_NAME}"
          echo "   Builds:  https://github.com/${GITHUB_USER}/${BUILD_REPO}"
          echo ""
          echo "✅ All stages completed successfully!"
          echo ""
        '''
      }
    }
  }
  
  post {
    success {
      echo '╔════════════════════════════════════════════════╗'
      echo '║     ✅ PIPELINE COMPLETED SUCCESSFULLY!       ║'
      echo '╚════════════════════════════════════════════════╝'
    }
    failure {
      echo '╔════════════════════════════════════════════════╗'
      echo '║          ❌ PIPELINE FAILED!                  ║'
      echo '╚════════════════════════════════════════════════╝'
    }
    always {
      cleanWs()
    }
  }
}
```

## 📋 Artifact İsimlendirme Formatı

Artık artifact'lar şu formatta olacak:
```
artifact-v0.1.3-20251027-143022-a1b2c3d.tar.gz
         │      │                │
         │      │                └─ Commit SHA (kısa)
         │      └─────────────────── Tarih ve Saat (YYYYMMdd-HHmmss)
         └────────────────────────── Version (package.json'dan)
```

**Örnek artifact adları:**
- `artifact-v0.1.3-20251027-143022-6429953.tar.gz`
- `artifact-v0.1.4-20251027-150530-a1b2c3d.tar.gz`
- `artifact-v0.1.5-20251027-163045-f3e4d5c.tar.gz`

## 🎯 Ne Yapıyor?

1. ✅ **Version Bump**: `package.json`'da version artırılır (0.1.2 → 0.1.3)
2. ✅ **Git Tag**: Yeni version için tag oluşturulur (v0.1.3)
3. ✅ **Push to Source**: `jenkins-demo-project` reposuna push edilir
4. ✅ **Build**: Next.js uygulaması build edilir
5. ✅ **Docker Image**: Docker image oluşturulur
6. ✅ **Create Artifact**: Tarihli artifact oluşturulur
7. ✅ **Push to Builds**: `jenkins-builds` reposuna artifact push edilir

## 📂 jenkins-builds Reposunda Görünüm
```
jenkins-builds/
├── artifact-v0.1.3-20251027-143022-6429953.tar.gz
├── artifact-v0.1.4-20251027-150530-a1b2c3d.tar.gz
├── artifact-v0.1.5-20251027-163045-f3e4d5c.tar.gz
└── README.md
```

Her artifact'ın commit mesajı detaylı olacak:
```
🚀 Add build artifact artifact-v0.1.3-20251027-143022-6429953.tar.gz

Project: jenkins-demo-project
Version: v0.1.3
Build Date: 20251027-143022
Commit: 6429953
Build Number: 15

Generated by Jenkins CI/CD Pipeline